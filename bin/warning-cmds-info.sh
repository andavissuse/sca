#!/bin/sh

#
# This script outputs information about commands that generated warnings.
#
# Inputs: 1) path containing features files
#	  2) short-form output file (optional)
#
# Output: Info messages written to stdout
#	  warning-cmds, warning-cmd-pkgs, warning-cmd-pkg-status
#	  name-value pairs written to output file
#

# functions
function usage() {
	echo "Usage: `basename $0` [-h (usage)] [-d(ebug)] features-path [output-file]"
}

# arguments
while getopts 'hd' OPTION; do
        case $OPTION in
                h)
                        usage
                        exit 0
                        ;;
                d)
                        DEBUG=1
                        ;;
        esac
done
shift $((OPTIND - 1))
if [ ! "$1" ]; then
        usage >&2
	exit 1
else
        featuresPath="$1"
fi
if [ ! -z "$2" ]; then
	outFile="$2"
fi
[ $DEBUG ] && echo "*** DEBUG: $0: featuresPath: $featuresPath, outFile: $outFile" >&2

if [ ! -d "$featuresPath" ] || [ $outFile ] && [ ! -f "$outFile" ]; then
	echo "$0: features path $featuresPath or output file $outFile does not exist, exiting..." >&2
	[ $outFile ] && echo "warning-cmds: error" >> $outFile
	[ $outFile ] && echo "warning-cmds-result: 0" >> $outFile
	exit 1
fi

# config file
curPath=`dirname "$(realpath "$0")"`
confFile="/usr/etc/sca-L0.conf"
[ -r "$confFile" ] && source ${confFile}
confFile="/etc/sca-L0.conf"
[ -r "$confFile" ] && source ${confFile}
confFile="$curPath/../sca-L0.conf"
[ -r "$confFile" ] && source ${confFile}
if [ -z "$SCA_HOME" ]; then
        echo "No sca-L0.conf file info; exiting..." >&2
	[ $outFile ] && echo "warning-cmds: error" >> $outFile
	[ $outFile ] && echo "warning-cmds-result: 0" >> $outFile
	exit 1
fi

# start
echo ">>> Checking warning message commands..."
rm $featuresPath/msgs.tmp $featuresPath/smsgs.tmp 2>/dev/null
for dataType in $SCA_WARNING_CMDS_DATATYPES; do
	cat $featuresPath/"$dataType".tmp >> $featuresPath/msgs.tmp
done
if [ ! -s "$featuresPath/msgs.tmp" ]; then
	echo "        No warning messages in supportconfig messages.txt file"
	[ $outFile ] && echo "warning-cmds: none" >> $outFile
	[ $outFile ] && echo "warning-cmds-result: 1" >> $outFile
	exit 0
fi
[ $DEBUG ] && echo "*** DEBUG: $0: $featuresPath/msgs.tmp:" >&2
[ $DEBUG ] && cat $featuresPath/msgs.tmp >&2
cat $featuresPath/msgs.tmp | sort -u > $featuresPath/smsgs.tmp
[ $DEBUG ] && echo "*** DEBUG: $0: $featuresPath/smsgs.tmp:" >&2
[ $DEBUG ] && cat $featuresPath/smsgs.tmp >&2
cmds=""
while IFS= read -r cmd; do
	cmds="$cmds $cmd"
done < $featuresPath/smsgs.tmp
cmds=`echo $cmds | sed "s/^ //"`
[ $DEBUG ] && echo "*** DEBUG: $0: cmds: $cmds" >&2
[ $outFile ] && echo "warning-cmds: $cmds" >> $outFile

# packages and status
os=`cat $featuresPath/os.tmp`
[ $DEBUG ] && echo "*** DEBUG: $0: os: $os" >&2
if [ -z "$os" ]; then
	echo "        Error retrieving OS info"
	for cmd in $cmds; do
		[ $outFile ] && echo "warning-cmds-pkgs-$cmd: error" >> $outFile
	done
	[ $outFile ] && echo "warning-cmds-result: 0" >> $outFile
	exit 1
fi
osEquiv=`"$SCA_BIN_PATH"/os-equiv.sh "$os"`
[ $DEBUG ] && echo "*** DEBUG: $0: osEquiv: $osEquiv" >&2
if [ "$osEquiv" ]; then
	os="$osEquiv"
fi
osId=`echo $os | cut -d'_' -f1`
osVerId=`echo $os | cut -d'_' -f2`
osArch=`echo $os | cut -d'_' -f1,2 --complement`
for cmd in $cmds; do
	echo "        Warning message generated by: $cmd"
	if echo $cmd | grep -q "^kernel"; then
		kern=`cat $featuresPath/kernel.tmp`
       		kVer=`echo $kern | sed 's/-[a-z]*$//'`
       		flavor=`echo $kern | sed "s/$kVer-//"`
		cmdPkgNames="kernel-$flavor"
	else
		sleCmdPkgNames=`grep "/$cmd " $SCA_SUSEDATA_PATH/rpmfiles-$os.txt 2>/dev/null | cut -d" " -f2 | sort -u | tr '\n' ' '`
		[ $DEBUG ] && echo "*** DEBUG: $0: sleCmdPkgNames: $sleCmdPkgNames" >&2
		if ! ls $SCA_SUSEDATA_PATH/rpmfiles-"$os".txt >/dev/null 2>&1; then 
			echo "            No package info for $cmd"
			[ $outFile ] && echo "warning-cmds-pkgs-$cmd: no-info" >> $outFile
			errorState="TRUE"
			continue
		fi
		scCmdPkgNames=""
		for sleCmdPkgName in $sleCmdPkgNames; do
			if scCmdPkgName=`grep "^$sleCmdPkgName " $featuresPath/rpm.txt | cut -d" " -f1`; then
				scCmdPkgNames="$scCmdPkgNames $scCmdPkgName"
			fi
		done
		[ $DEBUG ] && echo "*** DEBUG: $0: scCmdPkgNames: $scCmdPkgNames" >&2
		cmdPkgNames=""
		for i in $scCmdPkgNames; do
			if echo $i | grep -q "$cmd"; then
				if [ "$i" = "$cmd" ]; then
					cmdPkgNames="$i"
					break
				else
					cmdPkgNames="$cmdPkgNames $i"
				fi
			fi
		done
		if [ -z "$cmdPkgNames" ]; then
			cmdPkgNames="$scCmdPkgNames"
		fi
	fi
	[ $DEBUG ] && echo "*** DEBUG: $0: cmdPkgNames: $cmdPkgNames" >&2
	if [ -z "$cmdPkgNames" ]; then
		echo "            No package info for $cmd"
		[ $outFile ] && echo "warning-cmds-pkgs-$cmd: no-info" >> $outFile
		errorState="TRUE"
	else
		cmdPkgs=""
		for cmdPkgName in $cmdPkgNames; do
			[ $DEBUG ] && echo "*** DEBUG: $0: cmdPkgName: $cmdPkgName" >&2
			if [ "$cmdPkgName" = "kernel-$flavor" ]; then
				cmdPkgVer="$kVer"
			else
				cmdPkgVer=`grep "^$cmdPkgName " $featuresPath/rpm.txt | rev | cut -d" " -f1 | rev`
			fi
			cmdPkgs="$cmdPkgs $cmdPkgName-$cmdPkgVer"
		done
		cmdPkgs=`echo $cmdPkgs | sed "s/^ //"`
		[ $outFile ] && echo "warning-cmds-pkgs-$cmd: $cmdPkgs" >> $outFile
		for cmdPkg in $cmdPkgs; do
			[ $DEBUG ] && echo "*** DEBUG: $0: cmdPkg: $cmdPkg" >&2
			echo "            $cmd package: $cmdPkg"
			cmdPkgName=`echo $cmdPkg | rev | cut -d"-" -f1,2 --complement | rev`
			cmdPkgVer=`echo $cmdPkg | rev | cut -d"-" -f1,2 | rev`
			[ $DEBUG ] && echo "*** DEBUG: $0: cmdPkgName: $cmdPkgName, cmdPkgVer: $cmdPkgVer" >&2
			cmdPkgCur=`grep "^$cmdPkgName-[0-9]" $SCA_SUSEDATA_PATH/rpms-$os.txt 2>/dev/null | tail -1 | sed "s/\.rpm$//" | sed "s/\.noarch$//" | sed "s/\.${arch}$//"`
			if ! ls $SCA_SUSEDATA_PATH/rpms-"$os".txt >/dev/null 2>&1; then
				echo "                No current rpm version info for $cmdPkgName"
				[ $outFile ] && echo "warning-cmds-pkg-status-$cmdPkg: no-info" >> $outFile
				errorState="TRUE"
				continue
			fi
			cmdPkgCurVer=`echo $cmdPkgCur | sed "s/${cmdPkgName}-//"`
			[ $DEBUG ] && echo "*** DEBUG: $0: cmdPkgCur: $cmdPkgCur, cmdPkgCurVer: $cmdPkgCurVer" >&2
			if [ -z "$cmdPkgCurVer" ]; then
				echo "                Error retrieving version info for $cmdPkgName"
				[ $outFile ] && echo "warning-cmds-pkg-status-$cmdPkg: error" >> $outFile
				errorState="TRUE"
			elif ! echo "$cmdPkgCur" | grep -q "$cmdPkgVer"; then
				echo "                $cmdPkgName-$cmdPkgVer package status: downlevel (current version: $cmdPkgCur)"
				[ $outFile ] && echo "warning-cmds-pkg-status-$cmdPkg: downlevel" >> $outFile
				downlevelState="TRUE"
			else
				echo "                $cmdPkgName-$cmdPkgVer package status: current"
				[ $outFile ] && echo "warning-cmds-pkg-status-$cmdPkg: current" >> $outFile
			fi
		done
	fi
done < $featuresPath/smsgs.tmp

if [ "$errorState" = "TRUE" ] || [ "$downlevelState" = "TRUE" ] ; then
	warningCmdsResult="0"
else
	warningCmdsResult="-1"
fi
[ $outFile ] && echo "warning-cmds-result: $warningCmdsResult" >> "$outFile"
exit 0
